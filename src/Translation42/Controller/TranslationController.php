<?php
/**
 * admin42 (www.raum42.at)
 *
 * @link      http://www.raum42.at
 * @copyright Copyright (c) 2010-2014 raum42 OG (http://www.raum42.at)
 *
 */

namespace Translation42\Controller;

use Admin42\Mvc\Controller\AbstractAdminController;
use Translation42\Model\Translation;
use Translation42\TableGateway\TranslationTableGateway;
use Zend\Db\Sql\Where;

class TranslationController extends AbstractAdminController
{
    /**
     *
     */
    public function dashboardAction()
    {
        /** @var TranslationTableGateway $tableGateway */
        $tableGateway = $this->getTableGateway('Translation42\Translation');

        // show all textDomains and their stats
        $config = $this->getServiceLocator()->get('config');
        $textDomainConfigs = $config['translator']['remote_translation'];
        $textDomains = [];
        foreach ($textDomainConfigs as $textDomainConfig) {
            // TODO: make it a single query to count sums
            $numTotal = $tableGateway->select(['textDomain' => $textDomainConfig['text_domain']])->count();

            $whereTranslationNotNull = new Where();
            $whereTranslationNotNull->isNotNull('translation');

            $numTranslated =
                $tableGateway->select(['textDomain' => $textDomainConfig['text_domain'], $whereTranslationNotNull])
                    ->count();
            $percentTranslated = (int)($numTranslated / $numTotal * 100);

            $numMissingTotal =
                $tableGateway->select(['textDomain' => $textDomainConfig['text_domain'], 'translation' => null])->count(
                );
            $percentMissingTotal = (int)($numMissingTotal / $numTotal * 100);

            $numMissingManual = $tableGateway->select(
                ['textDomain'  => $textDomainConfig['text_domain'], 'status' => Translation::STATUS_MANUAL,
                 'translation' => null]
            )->count();
            $percentMissingManual = (int)($numMissingManual / $numTotal * 100);

            $numMissingAutoGenerated = $tableGateway->select(
                ['textDomain'  => $textDomainConfig['text_domain'], 'status' => Translation::STATUS_AUTO,
                 'translation' => null]
            )->count();
            $percentMissingAutoGenerated = (int)($numMissingAutoGenerated / $numTotal * 100);

            $textDomains[] = array_merge(
                $textDomainConfig, [
                    'num_total'                      => $numTotal,
                    'num_translated'                 => $numTranslated,
                    'percent_translated'             => $percentTranslated,
                    'num_missing_total'              => $numMissingTotal,
                    'percent_missing_total'          => $percentMissingTotal,
                    'num_missing_auto_generated'     => $numMissingAutoGenerated,
                    'percent_missing_auto_generated' => $percentMissingAutoGenerated,
                    'num_missing_manual'             => $numMissingManual,
                    'percent_missing_manual'         => $percentMissingManual,
                ]
            );
        }

        return [
            'textDomains' => $textDomains,
        ];
    }

    /**
     *
     */
    public function indexAction()
    {
        if ($this->getRequest()->isXmlHttpRequest()) {
            return $this->getSelector('Translation42\SmartTable\Translation')->getResult();
        }
    }

    /**
     *
     */
    public function detailAction()
    {
        $isEditMode = $this->params()->fromRoute("isEditMode");

        $prg = $this->prg();
        if ($prg instanceof Response) {
            return $prg;
        }

        $createEditForm = $this->getForm('Translation42\Translation\CreateEdit');

        if ($prg !== false) {
            if ($isEditMode === true) {
                $cmd = $this->getCommand('Translation42\Translation\Edit');
                $cmd->setTranslationId($this->params()->fromRoute("id"));
            } else {
                $cmd = $this->getCommand('Translation42\Translation\Create');
            }

            $formCommand = $this->getFormCommand();
            $translation = $formCommand->setForm($createEditForm)
                ->setProtectedData(['status'])
                ->setCommand($cmd)
                ->setData($prg)
                ->run();
            if (!$formCommand->hasErrors()) {
                $this->flashMessenger()->addSuccessMessage("Success");

                return $this->redirect()->toRoute(
                    'admin/translation/frontend/edit',
                    ['textDomain' => $this->params()->fromRoute("textDomain"), 'id' => $translation->getId()]
                );
            } else {
                $this->flashMessenger()->addErrorMessage("Error");
            }
        } else {
            if ($isEditMode === true) {
                $translation = $this->getTableGateway('Translation42\Translation')->selectByPrimary(
                    (int)$this->params()->fromRoute("id")
                );
                if (empty($translation)) {
                    return $this->redirect()->toRoute('admin/translation');
                }
                $createEditForm->setData(
                    [
                        'key' => $translation->getKey(),
                    ]
                );
            }
        }

        return [
            'createEditForm' => $createEditForm,
        ];
    }

    /**
     *
     */
    public function deleteAction()
    {
    }
}
