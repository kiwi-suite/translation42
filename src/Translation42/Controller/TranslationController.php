<?php
/**
 * translation42 (www.raum42.at)
 *
 * @link      http://www.raum42.at
 * @copyright Copyright (c) 2010-2015 raum42 OG (http://www.raum42.at)
 *
 */

namespace Translation42\Controller;

use Admin42\Mvc\Controller\AbstractAdminController;
use Core42\I18n\Localization\Localization;
use Translation42\Command\Translation\CreateCommand;
use Translation42\Command\Translation\EditCommand;
use Translation42\Command\Translation\ExportCommand;
use Translation42\Form\Translation\CreateForm;
use Translation42\Form\Translation\EditForm;
use Translation42\Model\Translation;
use Translation42\TableGateway\TranslationTableGateway;
use Zend\Db\Sql\Where;
use Zend\Http\Headers;
use Zend\Http\Response;

class TranslationController extends AbstractAdminController
{
    /**
     *
     */
    public function dashboardAction()
    {
        /** @var TranslationTableGateway $tableGateway */
        $tableGateway = $this->getTableGateway('Translation42\Translation');

        /** @var Localization $localization */
        $localization = $this->getServiceLocator()->get('Localization');
        $locales = $localization->getAvailableLocales();

        // show all textDomains and their stats
        $config = $this->getServiceLocator()->get('config');
        $textDomainConfigs = $config['translator']['remote_translation'];
        $textDomains = [];
        foreach ($textDomainConfigs as $textDomainConfig) {

            // TODO: make it a single query to count sums
            $numTotal = $tableGateway->select(['textDomain' => $textDomainConfig['text_domain']])->count();

            $whereTranslationNotNull = new Where();
            $whereTranslationNotNull->isNotNull('translation');

            $numTranslated = $tableGateway->select(
                [
                    'textDomain' => $textDomainConfig['text_domain'],
                    $whereTranslationNotNull
                ]
            )->count();
            $percentTranslated = $numTotal > 0 ? (int)($numTranslated / $numTotal * 100) : 0;

            $numMissingTotal = $tableGateway->select(
                [
                    'textDomain'  => $textDomainConfig['text_domain'],
                    'translation' => null
                ]
            )->count();
            $percentMissingTotal = $numTotal > 0 ? (int)($numMissingTotal / $numTotal * 100) : 0;

            $numMissingManual = $tableGateway->select(
                [
                    'textDomain'  => $textDomainConfig['text_domain'],
                    'status'      => Translation::STATUS_MANUAL,
                    'translation' => null
                ]
            )->count();
            $percentMissingManual = $numTotal > 0 ? (int)($numMissingManual / $numTotal * 100) : 0;

            $numMissingAutoGenerated = $tableGateway->select(
                [
                    'textDomain'  => $textDomainConfig['text_domain'],
                    'status'      => Translation::STATUS_AUTO,
                    'translation' => null
                ]
            )->count();
            $percentMissingAutoGenerated = $numTotal > 0 ? (int)($numMissingAutoGenerated / $numTotal * 100) : 0;

            $regions = [];
            foreach ($locales as $locale) {
                $localeNumTranslated = $tableGateway->select(
                    [
                        'textDomain' => $textDomainConfig['text_domain'],
                        'locale'     => $locale,
                        $whereTranslationNotNull
                    ]
                )->count();

                $localeNumMissingTotal = $tableGateway->select(
                    [
                        'textDomain'  => $textDomainConfig['text_domain'],
                        'locale'      => $locale,
                        'translation' => null
                    ]
                )->count();

                $regions[] = [
                    'region'            => strtolower(\Locale::getRegion($locale)),
                    'locale'            => $locale,
                    'num_translated'    => $localeNumTranslated,
                    'num_missing_total' => $localeNumMissingTotal,
                ];
            }

            //$numMissingAutoGenerated = $tableGateway->select(
            //    [
            //        'textDomain' => $textDomainConfig['text_domain'],
            //
            //    ]
            //)->count();

            $textDomains[] = array_merge(
                $textDomainConfig,
                [
                    'num_total'                      => $numTotal,
                    'num_translated'                 => $numTranslated,
                    'percent_translated'             => $percentTranslated,
                    'num_missing_total'              => $numMissingTotal,
                    'percent_missing_total'          => $percentMissingTotal,
                    'num_missing_auto_generated'     => $numMissingAutoGenerated,
                    'percent_missing_auto_generated' => $percentMissingAutoGenerated,
                    'num_missing_manual'             => $numMissingManual,
                    'percent_missing_manual'         => $percentMissingManual,
                    'regions'                        => $regions,
                ]
            );
        }

        return [
            'textDomains' => $textDomains,
        ];
    }

    /**
     *
     */
    public function indexAction()
    {
        if ($this->getRequest()->isXmlHttpRequest()) {
            return $this->getSelector('Translation42\SmartTable\Translation')->getResult();
        }

        /** @var Localization $localization */
        $localization = $this->getServiceLocator()->get('Localization');
        $locales = $localization->getAvailableLocalesDisplay();

        // show all textDomains and their stats
        $config = $this->getServiceLocator()->get('config');
        $textDomainConfigs = $config['translator']['remote_translation'];

        return [
            'locales'     => $locales,
            'textDomains' => $textDomainConfigs,
        ];
    }

    /**
     *
     */
    public function exportAction()
    {
        // TODO: allow different export types (dropdown in gui for: json, phparray)

        /** @var ExportCommand $cmd */
        $cmd = $this->getCommand('Translation42\Translation\Export');
        $cmd->setFormat('json');
        $cmd->setTextDomain($this->params()->fromRoute('text-domain'));
        $cmd->run();

        if ($cmd->hasErrors()) {
            foreach ($cmd->getErrors() as $errorMessages) {
                foreach ($errorMessages as $errorMessage) {
                    $this->flashMessenger()->addErrorMessage(
                        [
                            'title'   => 'toaster.translation.export.title.error',
                            'message' => $errorMessage,
                        ]
                    );
                }
            }
            return $this->redirect()->toRoute('admin/translation/list');
        }

        $headers = new Headers;
        $headers->addHeaders(
            [
                'Content-Disposition' => 'attachment; filename="'.$cmd->getFileName().'"',
                'Content-Type'        => 'application/octet-stream',
                'Content-Length'      => strlen($cmd->getOutput()),
                'Expires'             => '@0', // @0, because zf2 parses date as string to \DateTime() object
                'Cache-Control'       => 'must-revalidate',
                'Pragma'              => 'public'
            ]
        );

        $response = new Response;
        $response->setContent($cmd->getOutput());
        $response->setHeaders($headers);

        return $response;
    }

    /**
     * @return array|Response
     */
    public function detailAction()
    {
        if ($this->params()->fromRoute("isEditMode")) {
            return $this->editAction();
        }

        return $this->createAction();
    }

    /**
     * @return array|Response
     * @throws \Exception
     */
    public function createAction()
    {
        /** @var CreateForm $form */
        $form = $this->getForm('Translation42\Translation\Create');

        $prg = $this->prg();
        if ($prg instanceof Response) {
            return $prg;
        }

        if ($prg !== false) {
            /** @var CreateCommand $cmd */
            $cmd = $this->getCommand('Translation42\Translation\Create');

            $formCommand = $this->getFormCommand();
            $newTranslation = $formCommand->setForm($form)
                ->setProtectedData(['status'])
                ->setCommand($cmd)
                ->setData($prg)
                ->run();

            if (!$formCommand->hasErrors()) {
                $this->flashMessenger()->addSuccessMessage(
                    [
                        'title'   => 'toaster.translation.create.title.success',
                        'message' => 'toaster.translation.create.message.success',
                    ]
                );
                return $this->redirect()->toRoute('admin/translation/edit', ['id' => $newTranslation->getId()]);
            }

            $this->flashMessenger()->addErrorMessage(
                [
                    'title'   => 'toaster.translation.create.title.error',
                    'message' => 'toaster.translation.create.message.error',
                ]
            );
        }

        return [
            'form' => $form,
        ];
    }

    /**
     * @return array|Response
     * @throws \Exception
     */
    public function editAction()
    {
        $prg = $this->prg();
        if ($prg instanceof Response) {
            return $prg;
        }

        $translation = $this->getTableGateway('Translation42\Translation')->selectByPrimary(
            (int)$this->params()->fromRoute('id')
        );

        if (empty($translation)) {
            return $this->redirect()->toRoute('admin/translation');
        }

        /** @var EditForm $form */
        $form = $this->getForm('Translation42\Translation\Edit');
        $form->setData($translation->toArray());

        if ($prg !== false) {
            /** @var EditCommand $cmd */
            $cmd = $this->getCommand('Translation42\Translation\Edit');
            $cmd->setTranslationId((int)$this->params()->fromRoute('id'));

            $formCommand = $this->getFormCommand();
            $formCommand->setForm($form)
                ->setProtectedData(['status'])
                ->setCommand($cmd)
                ->setData($prg)
                ->run();

            if (!$formCommand->hasErrors()) {
                $this->flashMessenger()->addSuccessMessage(
                    [
                        'title'   => 'toaster.translation.edit.title.success',
                        'message' => 'toaster.translation.edit.message.success',
                    ]
                );

                $queryString = "";
                $queryParams = $this->params()->fromQuery();
                if (count($queryParams) > 0) {
                    $queryString = http_build_query($queryParams);
                }

                return $this->redirect()->toUrl(
                    $this->url()
                        ->fromRoute('admin/translation/list') . $queryString
                );
            }

            $this->flashMessenger()->addErrorMessage(
                [
                    'title'   => 'toaster.translation.edit.title.error',
                    'message' => 'toaster.translation.edit.message.error',
                ]
            );
        }

        // get related translations (same key and text domain but different locale)
        $whereLocaleNotSame = new Where();
        $whereLocaleNotSame->notEqualTo('locale', $translation->getLocale());
        $whereTranslationNotNull = new Where();
        $whereTranslationNotNull->isNotNull('translation');
        $relatedTranslations = $this->getTableGateway('Translation42\Translation')->select(
            [
                'message'    => $translation->getMessage(),
                'textDomain' => $translation->getTextDomain(),
                $whereLocaleNotSame,
                $whereTranslationNotNull,
            ]
        );

        return [
            'form'                => $form,
            'translation'         => $translation,
            'relatedTranslations' => $relatedTranslations,
        ];
    }

    /**
     *
     */
    public function deleteAction()
    {
    }
}
